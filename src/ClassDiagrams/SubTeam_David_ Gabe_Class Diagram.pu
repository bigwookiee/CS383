@startuml
hide circles  

class Player{
	-race : char
	-playerOrder : int
	--
	+setRace(r : char)
	+setNumber(n : int )
	+getRace() : char
	+getOrder() : int	
	==
	Author: David Klingenberg
}

class Army{
	-unitID : Unit[]
	-playerOrder : int
	--
	+addUnit(id : Unit)
	+removeUnit(id : Unit)
	+getUnits() : Unit[]
	==
	Author: David Klingenberg
}

class StellarConfiguration{
	-yellowSunPosition : int
	-redSunPosition : char
	-redSunStatus : int
	--
	+<<constructor>>StellarConfiguration(char redSunPos : char)
	+getYelloSunPosition() : int
	+getRedSunPosition() : char
	+getBlueSunPosition() : char
	+getRedSunStatus() : int
	+getBlueSunPosition() : int
	==
	Author: David Klingenberg
} 

class Scenario {
	-numerPlayers : int
	-raceList : char[]
	-unitsList : unit[]
	--
	+selectScenario()
	+getRace(playerNum : int) : char
	+getUnites(playerNum : int) : unit[]
	+getNumberPlayers() : int
	==
	Author: David Klingenberg
}

class RandomEvent{
	-currentEventKey : int
	-currentEventLength : int
	-currentEventDescription : int
	--
	+<<constructor>>RandomEvent(cEKey : int, cELength : int, cEDescription : int)
	+setCurrentEventKey (cEKey : int)
	+setCurrentEventLength (cELength :  int)
	+setCurrentEventDescription(cEDescription : int)
	+getCurrentEventKey () :  int
	+getCurrentEventLength (): int
	+getCurrentEventDescription() : int
	==
	Author: David Klingenberg
}

class RandomEventTable{
	-eventKey : int
	-eventLength : int
	-eventDescription : int
	--
	+<<constructor>>RandomEventTable(inEvent : int)
	+<<constructor>>RandomEventTable(inEvent : int, die1 : int, die2 : int)
	+getEventKey() : int
	+getEventLength() : int
	+getEventDescription() : String
	+getEventDescription(eKey) : String
	==
	Author: David Klingenberg
} 

class Diplomacy{
	==
	Author: David Klingenberg
} 


class PreTurnPhase
class PlayerTurnPhase
class PostTurnPhase
class GameTurn
class Spells{
	-name : String 
	-type : char
  	-manaCost : int
   	-range : int
   	-powerLevel : int
   	-resistable : bool
   	--
   	+Cast(hexTarget) : void
   	+Cast() : void
   	==
   	Author: Gabe Pearhill
}
class VictoryConditions{
	-points : int
	-specialConditions : String
	--
	+checkForCondtion(map) : int
	==
	Author: Gabe Pearhill
}
class CounterSpells
class PlayerOrderDetermination{
	--
	+chooseNextPlayer(aliances) : int
	==
	Author: Gabe Pearhill
}
class Alliances
class SwordSorcery
class MannaRegeneration {
	-rate : int
	--
	+Regenerate(Character) : int
	==
	Author: Gabe Pearhill
}

class MovableUnit{
}  
note right  : See Sub diagram.

class RandomMovment{
}

package GameSetUp{
}

Package LoadSave{
}

SwordSorcery --* GameTurn
SwordSorcery -* LoadSave
GameSetUp *- SwordSorcery
Scenario *- GameSetUp 

Scenario --* Player
Scenario --* Army
VictoryConditions "<b>1 per player</b>" --* Scenario

GameTurn *-- PostTurnPhase 
GameTurn --* PreTurnPhase

PlayerTurnPhase “<b>7..1</b>” -o  PostTurnPhase
PreTurnPhase “<b>1..7</b>”  -o  PlayerTurnPhase

PreTurnPhase --* RandomEvent
PlayerOrderDetermination *-- PreTurnPhase
Alliances *-- PreTurnPhase
RandomEvent --* RandomEventTable

PlayerTurnPhase --* Player
Player “<b>1..*</b>” --o Army
Army “<b>1..*</b>” --o MovableUnit

MovableUnit -- Spells : Affect unit(s),\nunit(s) movement,\nor hex(es)  
MovableUnit -- CounterSpells : Cast by\nopposing player(s)
CounterSpells - Spells : Negates Spells

PostTurnPhase --* RandomMovment
StellarConfiguration *-- PostTurnPhase
StellarConfiguration -- MannaRegeneration : Regeneration dependant on\n stellar configuration
PostTurnPhase --* Diplomacy
PostTurnPhase --* MannaRegeneration

Alliances “<b>1..6</b>” --o Player
Player *-- PlayerOrderDetermination

RandomMovment “<b>1..*</b>” --o MovableUnit 
MannaRegeneration “<b>1..*</b>” --o MovableUnit
Diplomacy o-- “<b>*..1</b>” MovableUnit

@enduml


